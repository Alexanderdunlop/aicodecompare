---
description: 
globs: 
alwaysApply: true
---
---
description: Functional Programming Guidelines for Next.js
globs: "**/*.{js,jsx,ts,tsx}"
alwaysApply: false
---

# Functional Programming Guidelines for Next.js

This codebase follows functional programming principles to ensure code is predictable, testable, and maintainable. Please adhere to these guidelines when writing or modifying code.

---

## Why Functional Programming?

- **Predictability:** Pure functions always return the same output for the same input.
- **Testability:** Isolated logic is easier to test.
- **Maintainability:** Immutability and composition reduce bugs and complexity.

---

## Core Principles

### 1. Pure Functions

**Do:**
- Write functions that depend only on their input parameters.
- Ensure functions have no side effects (no network, logging, or mutation).

**Don't:**
- Rely on or mutate external state.
- Perform I/O or side effects inside pure functions.

**Example:**
```tsx
// GOOD
function sum(items) {
  return items.reduce((a, b) => a + b, 0);
}

// BAD
function sum(items) {
  let total = 0;
  items.forEach(item => {
    total += item;
    console.log(item); // Side effect!
  });
  return total;
}
```

---

### 2. Immutability

**Do:**
- Use spread operators, `Object.assign`, or libraries like Immer.
- Prefer `const` over `let`.
- Use array methods like `map`, `filter`, `reduce`.

**Don't:**
- Mutate objects or arrays directly.

**Example:**
```tsx
// GOOD
function addItem(items, newItem) {
  return [...items, newItem];
}

// BAD
function addItem(items, newItem) {
  items.push(newItem); // Mutation!
  return items;
}
```

---

### 3. Function Composition

**Do:**
- Build complex logic by combining small, single-purpose functions.
- Use `compose` or `pipe` utilities.

**Example:**
```typescript
import { compose, pipe } from '../functional-utils';

const double = x => x * 2;
const increment = x => x + 1;

const doubleThenIncrement = pipe(double, increment);
```

---

### 4. Higher-Order Functions

**Do:**
- Use and create functions that accept or return other functions.
- Prefer array methods and custom HOFs for repeated patterns.

**Example:**
```tsx
const withLogging = fn => (...args) => {
  console.log(args);
  return fn(...args);
};
```

---

### 5. Isolation of Side Effects

**Do:**
- Contain side effects at the edges (e.g., in event handlers, `useEffect`, or API utilities).
- Keep React components and transformation logic pure.

**Example:**
```tsx
'use client';
import { useState } from 'react';
import { fetchData } from '../lib/api';

const processApiData = data =>
  data.map(item => ({ ...item, displayName: `${item.name} (${item.category})` }));

export default function ProductList() {
  const [products, setProducts] = useState([]);
  const handleFetch = async () => {
    const data = await fetchData('/api/products');
    setProducts(processApiData(data));
  };
  return (
    <div>
      <button onClick={handleFetch}>Load</button>
      <ul>
        {products.map(p => <li key={p.id}>{p.displayName}</li>)}
      </ul>
    </div>
  );
}
```

---

## Next.js Patterns

- **Server Components:** Use pure functions for data transformation. Isolate side effects in separate utilities.
- **Client Components:** Keep rendering pure. Isolate side effects in `useEffect` or event handlers.
- **Data Fetching:** Use SWR/React Query for remote state. Keep transformation logic pure and separate.

---

## Utilities

See [`functional-utils.ts`](mdc:functional-utils.ts) for reusable helpers:
- `compose`, `pipe`, `memoize`, `curry`

---

## Summary

Functional programming is a principle to strive for. Isolate exceptions and document them. When in doubt, prefer purity, immutability, and composition.

@functional-utils.ts
```typescript
// Collection of pure utility functions for functional programming

/**
 * Composes functions from right to left
 */
export const compose = (...fns) => (x) => 
  fns.reduceRight((y, f) => f(y), x);

/**
 * Pipes functions from left to right
 */
export const pipe = (...fns) => (x) => 
  fns.reduce((y, f) => f(y), x);

/**
 * Creates a memoized version of a function
 */
export const memoize = (fn) => {
  const cache = new Map();
  return (...args) => {
    const key = JSON.stringify(args);
    if (!cache.has(key)) {
      cache.set(key, fn(...args));
    }
    return cache.get(key);
  };
};

/**
 * Curries a function to allow partial application
 */
export const curry = (fn) => {
  const arity = fn.length;
  return function curried(...args) {
    if (args.length >= arity) {
      return fn(...args);
    }
    return (...moreArgs) => curried(...args, ...moreArgs);
  };
};
```